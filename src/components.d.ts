/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  EventEmitter,
} from '@stencil/core';
import {
  AlertRaised,
} from './components/alert-component-css-variables/alert-component-css-variables';
import {
  AlertRaised as AlertRaised2,
} from './components/alert-component-events/alert-component-events';
import {
  AlertRaised as AlertRaised3,
} from './components/alert-component-methods/alert-component-methods';
import {
  AlertRaised as AlertRaised4,
} from './components/alert-component-shadow/alert-component-shadow';
import {
  AlertRaised as AlertRaised5,
} from './components/alert-component-styling/alert-component-styling';
import {
  AlertRaised as AlertRaised6,
} from './components/alert-component-themes/alert-component-themes';
import {
  AlertRaised as AlertRaised7,
} from './components/alert-component-watch/alert-component-watch';

declare global {

  namespace StencilComponents {
    interface AlertComponentCssVariables {
      /**
       * The alert value
       */
      'alertValue': number;
      /**
       * The initial value
       */
      'initialValue': number;
      /**
       * Resets the current value to the initial value
       */
      'reset': () => void;
    }
  }

  interface HTMLAlertComponentCssVariablesElement extends StencilComponents.AlertComponentCssVariables, HTMLStencilElement {}

  var HTMLAlertComponentCssVariablesElement: {
    prototype: HTMLAlertComponentCssVariablesElement;
    new (): HTMLAlertComponentCssVariablesElement;
  };
  interface HTMLElementTagNameMap {
    'alert-component-css-variables': HTMLAlertComponentCssVariablesElement;
  }
  interface ElementTagNameMap {
    'alert-component-css-variables': HTMLAlertComponentCssVariablesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alert-component-css-variables': JSXElements.AlertComponentCssVariablesAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertComponentCssVariablesAttributes extends HTMLAttributes {
      /**
       * The alert value
       */
      'alertValue'?: number;
      /**
       * The initial value
       */
      'initialValue'?: number;
      'onAlertRaised'?: (event: CustomEvent<AlertRaised>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AlertComponentEvents {
      /**
       * The alert value
       */
      'alertValue': number;
      /**
       * The initial value
       */
      'initialValue': number;
    }
  }

  interface HTMLAlertComponentEventsElement extends StencilComponents.AlertComponentEvents, HTMLStencilElement {}

  var HTMLAlertComponentEventsElement: {
    prototype: HTMLAlertComponentEventsElement;
    new (): HTMLAlertComponentEventsElement;
  };
  interface HTMLElementTagNameMap {
    'alert-component-events': HTMLAlertComponentEventsElement;
  }
  interface ElementTagNameMap {
    'alert-component-events': HTMLAlertComponentEventsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alert-component-events': JSXElements.AlertComponentEventsAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertComponentEventsAttributes extends HTMLAttributes {
      /**
       * The alert value
       */
      'alertValue'?: number;
      /**
       * The initial value
       */
      'initialValue'?: number;
      'onAlertRaised'?: (event: CustomEvent<AlertRaised>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AlertComponentLifecycle {
      /**
       * The alert value
       */
      'alertValue': number;
      /**
       * The initial value
       */
      'initialValue': number;
    }
  }

  interface HTMLAlertComponentLifecycleElement extends StencilComponents.AlertComponentLifecycle, HTMLStencilElement {}

  var HTMLAlertComponentLifecycleElement: {
    prototype: HTMLAlertComponentLifecycleElement;
    new (): HTMLAlertComponentLifecycleElement;
  };
  interface HTMLElementTagNameMap {
    'alert-component-lifecycle': HTMLAlertComponentLifecycleElement;
  }
  interface ElementTagNameMap {
    'alert-component-lifecycle': HTMLAlertComponentLifecycleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alert-component-lifecycle': JSXElements.AlertComponentLifecycleAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertComponentLifecycleAttributes extends HTMLAttributes {
      /**
       * The alert value
       */
      'alertValue'?: number;
      /**
       * The initial value
       */
      'initialValue'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AlertComponentMethods {
      /**
       * The alert value
       */
      'alertValue': number;
      /**
       * The initial value
       */
      'initialValue': number;
      /**
       * Resets the current value to the initial value
       */
      'reset': () => void;
    }
  }

  interface HTMLAlertComponentMethodsElement extends StencilComponents.AlertComponentMethods, HTMLStencilElement {}

  var HTMLAlertComponentMethodsElement: {
    prototype: HTMLAlertComponentMethodsElement;
    new (): HTMLAlertComponentMethodsElement;
  };
  interface HTMLElementTagNameMap {
    'alert-component-methods': HTMLAlertComponentMethodsElement;
  }
  interface ElementTagNameMap {
    'alert-component-methods': HTMLAlertComponentMethodsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alert-component-methods': JSXElements.AlertComponentMethodsAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertComponentMethodsAttributes extends HTMLAttributes {
      /**
       * The alert value
       */
      'alertValue'?: number;
      /**
       * The initial value
       */
      'initialValue'?: number;
      'onAlertRaised'?: (event: CustomEvent<AlertRaised>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AlertComponentProps {
      /**
       * The alert value
       */
      'alertValue': number;
      /**
       * The initial value
       */
      'initialValue': number;
    }
  }

  interface HTMLAlertComponentPropsElement extends StencilComponents.AlertComponentProps, HTMLStencilElement {}

  var HTMLAlertComponentPropsElement: {
    prototype: HTMLAlertComponentPropsElement;
    new (): HTMLAlertComponentPropsElement;
  };
  interface HTMLElementTagNameMap {
    'alert-component-props': HTMLAlertComponentPropsElement;
  }
  interface ElementTagNameMap {
    'alert-component-props': HTMLAlertComponentPropsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alert-component-props': JSXElements.AlertComponentPropsAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertComponentPropsAttributes extends HTMLAttributes {
      /**
       * The alert value
       */
      'alertValue'?: number;
      /**
       * The initial value
       */
      'initialValue'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AlertComponentShadow {
      /**
       * The alert value
       */
      'alertValue': number;
      /**
       * The initial value
       */
      'initialValue': number;
      /**
       * Resets the current value to the initial value
       */
      'reset': () => void;
    }
  }

  interface HTMLAlertComponentShadowElement extends StencilComponents.AlertComponentShadow, HTMLStencilElement {}

  var HTMLAlertComponentShadowElement: {
    prototype: HTMLAlertComponentShadowElement;
    new (): HTMLAlertComponentShadowElement;
  };
  interface HTMLElementTagNameMap {
    'alert-component-shadow': HTMLAlertComponentShadowElement;
  }
  interface ElementTagNameMap {
    'alert-component-shadow': HTMLAlertComponentShadowElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alert-component-shadow': JSXElements.AlertComponentShadowAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertComponentShadowAttributes extends HTMLAttributes {
      /**
       * The alert value
       */
      'alertValue'?: number;
      /**
       * The initial value
       */
      'initialValue'?: number;
      'onAlertRaised'?: (event: CustomEvent<AlertRaised>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AlertComponentSlots {
      'first': string;
      'last': string;
    }
  }

  interface HTMLAlertComponentSlotsElement extends StencilComponents.AlertComponentSlots, HTMLStencilElement {}

  var HTMLAlertComponentSlotsElement: {
    prototype: HTMLAlertComponentSlotsElement;
    new (): HTMLAlertComponentSlotsElement;
  };
  interface HTMLElementTagNameMap {
    'alert-component-slots': HTMLAlertComponentSlotsElement;
  }
  interface ElementTagNameMap {
    'alert-component-slots': HTMLAlertComponentSlotsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alert-component-slots': JSXElements.AlertComponentSlotsAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertComponentSlotsAttributes extends HTMLAttributes {
      'first'?: string;
      'last'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AlertComponentStart {

    }
  }

  interface HTMLAlertComponentStartElement extends StencilComponents.AlertComponentStart, HTMLStencilElement {}

  var HTMLAlertComponentStartElement: {
    prototype: HTMLAlertComponentStartElement;
    new (): HTMLAlertComponentStartElement;
  };
  interface HTMLElementTagNameMap {
    'alert-component-start': HTMLAlertComponentStartElement;
  }
  interface ElementTagNameMap {
    'alert-component-start': HTMLAlertComponentStartElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alert-component-start': JSXElements.AlertComponentStartAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertComponentStartAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AlertComponentState {
      /**
       * The alert value
       */
      'alertValue': number;
      /**
       * The initial value
       */
      'initialValue': number;
    }
  }

  interface HTMLAlertComponentStateElement extends StencilComponents.AlertComponentState, HTMLStencilElement {}

  var HTMLAlertComponentStateElement: {
    prototype: HTMLAlertComponentStateElement;
    new (): HTMLAlertComponentStateElement;
  };
  interface HTMLElementTagNameMap {
    'alert-component-state': HTMLAlertComponentStateElement;
  }
  interface ElementTagNameMap {
    'alert-component-state': HTMLAlertComponentStateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alert-component-state': JSXElements.AlertComponentStateAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertComponentStateAttributes extends HTMLAttributes {
      /**
       * The alert value
       */
      'alertValue'?: number;
      /**
       * The initial value
       */
      'initialValue'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AlertComponentStyling {
      /**
       * The alert value
       */
      'alertValue': number;
      /**
       * The initial value
       */
      'initialValue': number;
      /**
       * Resets the current value to the initial value
       */
      'reset': () => void;
    }
  }

  interface HTMLAlertComponentStylingElement extends StencilComponents.AlertComponentStyling, HTMLStencilElement {}

  var HTMLAlertComponentStylingElement: {
    prototype: HTMLAlertComponentStylingElement;
    new (): HTMLAlertComponentStylingElement;
  };
  interface HTMLElementTagNameMap {
    'alert-component-styling': HTMLAlertComponentStylingElement;
  }
  interface ElementTagNameMap {
    'alert-component-styling': HTMLAlertComponentStylingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alert-component-styling': JSXElements.AlertComponentStylingAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertComponentStylingAttributes extends HTMLAttributes {
      /**
       * The alert value
       */
      'alertValue'?: number;
      /**
       * The initial value
       */
      'initialValue'?: number;
      'onAlertRaised'?: (event: CustomEvent<AlertRaised>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AlertComponentThemes {
      /**
       * The alert value
       */
      'alertValue': number;
      /**
       * The initial value
       */
      'initialValue': number;
      /**
       * Resets the current value to the initial value
       */
      'reset': () => void;
    }
  }

  interface HTMLAlertComponentThemesElement extends StencilComponents.AlertComponentThemes, HTMLStencilElement {}

  var HTMLAlertComponentThemesElement: {
    prototype: HTMLAlertComponentThemesElement;
    new (): HTMLAlertComponentThemesElement;
  };
  interface HTMLElementTagNameMap {
    'alert-component-themes': HTMLAlertComponentThemesElement;
  }
  interface ElementTagNameMap {
    'alert-component-themes': HTMLAlertComponentThemesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alert-component-themes': JSXElements.AlertComponentThemesAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertComponentThemesAttributes extends HTMLAttributes {
      /**
       * The alert value
       */
      'alertValue'?: number;
      /**
       * The initial value
       */
      'initialValue'?: number;
      'onAlertRaised'?: (event: CustomEvent<AlertRaised>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AlertComponentWatch {
      /**
       * The alert value
       */
      'alertValue': number;
      /**
       * The initial value
       */
      'initialValue': number;
    }
  }

  interface HTMLAlertComponentWatchElement extends StencilComponents.AlertComponentWatch, HTMLStencilElement {}

  var HTMLAlertComponentWatchElement: {
    prototype: HTMLAlertComponentWatchElement;
    new (): HTMLAlertComponentWatchElement;
  };
  interface HTMLElementTagNameMap {
    'alert-component-watch': HTMLAlertComponentWatchElement;
  }
  interface ElementTagNameMap {
    'alert-component-watch': HTMLAlertComponentWatchElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alert-component-watch': JSXElements.AlertComponentWatchAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertComponentWatchAttributes extends HTMLAttributes {
      /**
       * The alert value
       */
      'alertValue'?: number;
      /**
       * The initial value
       */
      'initialValue'?: number;
      'onAlertRaised'?: (event: CustomEvent<AlertRaised>) => void;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;